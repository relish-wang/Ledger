package wang.relish.ledger.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import wang.relish.ledger.bean.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PROJECT".
 */
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property StartTime = new Property(2, long.class, "startTime", false, "START_TIME");
        public final static Property Pid = new Property(3, long.class, "pid", false, "PID");
        public final static Property Principal = new Property(4, double.class, "principal", false, "PRINCIPAL");
        public final static Property Benefit = new Property(5, double.class, "benefit", false, "BENEFIT");
    }


    public ProjectDao(DaoConfig config) {
        super(config);
    }

    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"START_TIME\" INTEGER NOT NULL ," + // 2: startTime
                "\"PID\" INTEGER NOT NULL ," + // 3: pid
                "\"PRINCIPAL\" REAL NOT NULL ," + // 4: principal
                "\"BENEFIT\" REAL NOT NULL );"); // 5: benefit
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getPid());
        stmt.bindDouble(5, entity.getPrincipal());
        stmt.bindDouble(6, entity.getBenefit());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getStartTime());
        stmt.bindLong(4, entity.getPid());
        stmt.bindDouble(5, entity.getPrincipal());
        stmt.bindDouble(6, entity.getBenefit());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
                cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // name
                cursor.getLong(offset + 2), // startTime
                cursor.getLong(offset + 3), // pid
                cursor.getDouble(offset + 4), // principal
                cursor.getDouble(offset + 5) // benefit
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setStartTime(cursor.getLong(offset + 2));
        entity.setPid(cursor.getLong(offset + 3));
        entity.setPrincipal(cursor.getDouble(offset + 4));
        entity.setBenefit(cursor.getDouble(offset + 5));
    }

    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Project entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Project entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
